<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tasty.app.module.review.repository.mapper.ReviewMapper">

  <!-- 리뷰 등록 -->
  <insert id="insertOne" useGeneratedKeys="true" keyProperty="reviewId">
    insert into review (email, title, content, store_name, store_address,
                        thumbnail_url, thumbnail_file_name, star)
    values (#{email}, #{title}, #{content}, #{storeName}, #{storeAddress},
            #{thumbnailUrl}, #{thumbnailFileName}, #{star})
  </insert>

  <!-- 리뷰 이미지 등록 -->
  <insert id="insertAllForReviewImage">
    insert into review_image (review_id, upload_file_name)
    values
    <foreach collection="reviewImages" item="reviewImage" separator=", ">
      (#{reviewImage.reviewId}, #{reviewImage.uploadFileName})
    </foreach>
  </insert>

  <!-- 리뷰 조회 -->
  <select id="selectOneById" resultType="com.tasty.app.module.review.domain.Review">
    select *
    from review
    where review_id = #{reviewId}
  </select>

  <!-- 리뷰 이미지 조회 -->
  <select id="selectAllForReviewImages" resultType="com.tasty.app.module.review.domain.ReviewImage">
    select review_image_id, review_id, upload_file_name
    from review_image
    where review_id = #{reviewId}
  </select>

  <!-- 총 리뷰 수 (검색어) -->
  <select id="countAllBySearch" resultType="int">
    select count(review_id)
    from review
    <where>
      <if test="search != null and search !=''">
        and title like concat('%', #{search}, '%')
        or content like concat('%', #{search}, '%')
      </if>
    </where>
  </select>

  <!-- 총 리뷰 수 (이메일) -->
  <select id="countAllByEmail" resultType="int">
    select count(review_id)
    from review
    where email = #{email}
  </select>

  <!-- 리뷰 목록 -->
  <select id="selectAll" resultType="com.tasty.app.module.review.domain.Review">
    select *
    from review
    <where>
      <if test="search != null and search !=''">
        and title like concat('%', #{search}, '%')
        or content like concat('%', #{search}, '%')
      </if>
    </where>
    <trim prefix="order by">
      <!-- sortOption: 전체 (0), 최근 순 (1), 평점 순 (2) -->
      <if test="sortOption == 0"> review_id desc</if>
      <if test="sortOption == 1"> review_id desc</if>
      <if test="sortOption == 2"> star desc, review_id desc</if>
    </trim>
    limit #{pageable.offset}, #{pageable.size}
  </select>

  <!-- 리뷰 수정 -->
  <update id="updateOneById">
    update review
    set title = #{params.review.title},
        content = #{params.review.content},
        store_name = #{params.review.storeName},
        store_address = #{params.review.storeAddress},
        thumbnail_url = #{params.review.thumbnailUrl},
        thumbnail_file_name = #{params.review.thumbnailFileName},
        star = #{params.review.star}
    where review_id = #{params.reviewId}
  </update>

  <!-- 리뷰 삭제 -->
  <delete id="deleteOne">
    delete from review
    where review_id = #{reviewId}
  </delete>

  <!-- 리뷰 파일 목록 삭제 -->
  <delete id="deleteAllForReviewImages">
    delete from review_image
    where review_id = #{reviewId}
  </delete>

  <!-- 리뷰 선택 삭제 -->
  <delete id="deleteAll">
    delete from review
    where review_id in
    <foreach collection="array" item="review_id" open="(" separator=", " close=")">
      #{review_id}
    </foreach>
  </delete>

  <!-- 조회 수 증가 -->
  <update id="updateHits">
    update review
    set hits = hits + 1
    where review_id = #{reviewId}
  </update>

  <!-- 리뷰 목록을 이메일로 조회 -->
  <select id="selectAllByEmail" resultType="com.tasty.app.module.review.domain.Review">
    select review_id,
           title,
           store_name,
           star,
           good,
           hits,
           reg_date
    from review
    where email = #{email}
    order by review_id desc
    limit #{pageable.offset}, #{pageable.size}
  </select>

  <!-- 내가 찜한 리뷰 -->
  <select id="selectAllByGoodByEmail" resultType="java.util.HashMap">
    select r.review_id,
           r.title,
           r.store_name,
           r.good,
           r.hits,
           r.reg_date,
           m.nick_name
    from review as r
    inner join member as m
      on r.email = m.email
    inner join good as g
      on r.review_id = g.review_id
    where g.email = #{email}
    order by r.review_id desc
    limit #{pageable.offset}, #{pageable.size}
  </select>
</mapper>